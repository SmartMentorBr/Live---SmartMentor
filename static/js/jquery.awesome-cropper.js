// Generated by CoffeeScript 1.6.3
(function() {
  var $;

  $ = jQuery;

  $.awesomeCropper = function(inputAttachTo, options) {
    var $applyButton, $cancelButton, $container, $cropSandbox, $fileSelect, $imagesContainer, $inputAttachTo, $progressBar, $resultIm, $sourceIm, $urlSelect, $urlSelectButton, a, cleanImages, div, drawImage, fileAllowed, handleDragOver, handleDropFileSelect, handleFileSelect, image, input, log, readFile, removeAreaSelect, removeLoading, saveCrop, setAreaSelect, setImages, setLoading, setOriginalSize, settings;
    var clicouvezes = 0;
    $msgFooter = "Clique sobre a imagem para liberar o upload";
    settings = {
      width: 100,
      height: 100,
      debug: false
    };

    settings = $.extend(settings, options);

    log = function() {
      if (settings.debug) {
        return typeof console !== "undefined" && console !== null ? console.log(arguments) : void 0;
      }
    };

    $inputAttachTo = $(inputAttachTo);

    input = function(type) {
      return $("<input class='input-file' type = \"" + type + "\" />");
    };

    div = function() {
      return $("<div/>");
    };

    a = function(text) {
      // return $("<a href=\"#\">" + text + "</a>");
      return $("<button href=\"#\">" + text + "</button>");
    };

    image = function() {
      return $('<img/>');
    };

    $container = div().insertAfter($inputAttachTo).addClass('awesome-cropper');

    $cropSandbox = $('<canvas></canvas>');

    $cropSandbox.attr({
      width: settings.width,
      height: settings.height
    });

    $container.append($cropSandbox);
    $fileSelect = input('file');
    $container.append($fileSelect);

    if (settings.proxy_path !== void 0) {
      $urlSelect = input('text');
      $urlSelectButton = input('button');
      $urlSelectButton.val('Upload from url');
      $container.append(div().addClass('form-group').append($urlSelect).append($urlSelectButton));
    }

    $progressBar = div().addClass('progress hide').append(div().addClass('progress-bar').attr({
      role: 'progressbar',
      'aria-valuenow': "60",
      'aria-valuemin': "0",
      'aria-valuemax': "100",
      style: "width: 60%;"
    }));

    $container.append($progressBar);
    $resultIm = image();
    $container.append($resultIm);

    //$sourceIm - imagem upada
    $sourceIm = image();

    var divMsgFooter = document.createElement('div');
    divMsgFooter.setAttribute('style','width: 30%;float: left;text-align: center;');
    divMsgFooter.innerHTML = $msgFooter;
    
    // 
    $applyButton = a(text.button_upload_apply).addClass('form-btn form btn-success form-btn-profile form-btn-profile-submit btn-upload');
    
    // ============
    $applyButton.attr("id","btnSubmitUpload");

    $applyButton.attr("title","Selecione uma area na figura");

    $applyButton.attr("disabled","disabled");
    // ============
    
   
    $cancelButton = a(text.button_upload_cancel).addClass('form-btn form btn-sucess recusa form-btn-profile btn-upload').attr({
      'data-dismiss': "modal"
    });

    $imagesContainer =
    div().addClass('modal-upload').append(div().addClass('modal-dialog').append(div().addClass('modal-content').append(div().addClass('modal-body').append(div().addClass('col-md-9').append($sourceIm)).append(div().addClass('col-md-3').append($cropSandbox)).append(div().addClass('clearfix')),
      div().addClass('modal-footer').append(div().addClass('btn-group').append(divMsgFooter).append($cancelButton).append($applyButton))))).addClass('modal hide').attr({
      role: 'dialog'
    });
      
      $container.append($imagesContainer);

      removeAreaSelect = function(image) {
       

        return image.imgAreaSelect({
          remove: true
        });
      };

      cleanImages = function() {

        $cropSandbox.attr({
              width: settings.width,
              height: settings.height
            });
        var im;
        removeAreaSelect($sourceIm);
        im = $sourceIm;
        $sourceIm = image();

        return im.replaceWith($sourceIm);

      };

      setLoading = function() {
        return $progressBar.removeClass('hide');
      };

      removeLoading = function() {
        $imagesContainer.on('shown.bs.modal', function() {
          return setAreaSelect($sourceIm);
        }).on('hidden.bs.modal', function() {
          return cleanImages();
        }).modal();

        return $progressBar.addClass('hide');
      };

      setOriginalSize = function(img) {
        var tempImage;
        tempImage = new Image();        
        tempImage.onload = function() {
          return img.attr({            
            'data-original-width': tempImage.width,
            'data-original-height': tempImage.height
          });
        };
        return tempImage.src = img.attr('src');
      };

      setImages = function(uri) {
        return $sourceIm.attr('src', uri).load(function() {

          removeLoading();
          return setOriginalSize($sourceIm);

        });
      };

    
      drawImage = function(img, x, y, width, height) {

        $cropSandbox[0].width = $cropSandbox[0].width // Hack para limpar o canvas
        

        var context, destHeight, destWidth, destX, destY, oHeight, oWidth, r, sourceHeight, sourceWidth, sourceX, sourceY;
        oWidth = img.attr('data-original-width');
        oHeight = img.attr('data-original-height');
        if (oWidth > oHeight) {
          r = oHeight / img.height();
        } else {
          r = oWidth / img.width();
        }
        sourceX = Math.round(x * r);
        sourceY = Math.round(y * r);
        sourceWidth = Math.round(width * r);
        sourceHeight = Math.round(height * r);
        destX = 0;
        destY = 0;
        destWidth = settings.width;
        destHeight = settings.height;


        context = $cropSandbox.get(0).getContext('2d');

        return context.drawImage(img.get(0), sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);

      };

      setAreaSelect = function(image) {
       console.log("1");
       var viewPort, x2, y2,
       _this = this;
       viewPort = $(window).height() - 150;
      //  if ($sourceIm.height() > viewPort) {
      //   $sourceIm.css({
      //     height: viewPort + "px"
      //   });
      // }

       $sourceIm.css({
          height: 300 + "px"
        });

      log(image.width(), image.height());

      if (image.width() / settings.width >= image.height() / settings.height) {
        y2 = image.height();
        x2 = Math.round(settings.width * (image.height() / settings.height));
      } else {
        x2 = image.width();
        y2 = Math.round(settings.height * (image.width() / settings.width));
      }

      log(x2, y2, image.width(), image.height());

      drawImage($sourceIm, 0, 0, x2 - 1, y2 - 1,false);


      return image.imgAreaSelect({

        aspectRatio: "" + settings.width + ":" + settings.height,
        handles: true,
        x1: 0,
        y1: 0,
        x2: x2,
        y2: y2,

        onSelectEnd: function(img, selection) {
          return drawImage($sourceIm, selection.x1, selection.y1, selection.width - 1, selection.height - 1);
        }
      });
    };

// ========================================

fileAllowed = function(name) {
  var res;
  res = name.match(/\.(jpg|png|gif|jpeg)$/mi);
  if (!res) {
    alert('Only *.jpeg, *.jpg, *.png, *.gif files allowed');
    return false;
  } else {
    return true;
  }
};

readFile = function(file) {

  var reader;
  reader = new FileReader();
  setLoading();

  console.log("carrega a img");

  reader.onload = function(e) {
    console.log(e.target.result);
    return setImages(e.target.result);
  };
  
  return reader.readAsDataURL(file);

};
handleDropFileSelect = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  if (evt.originalEvent.dataTransfer.files[0] !== void 0) {
    if (!fileAllowed(evt.originalEvent.dataTransfer.files[0].name)) {
      return;
    }
    return readFile(evt.originalEvent.dataTransfer.files[0]);
  }
};

handleDragOver = function(e) {

  console.log("handleDragOver");
  e.originalEvent.dataTransfer.dropEffect = "copy";
  e.stopPropagation();
  return e.preventDefault();
};

handleFileSelect = function(evt) {
  
  if (evt.target.files[0] !== void 0) {
    if (!fileAllowed(evt.target.files[0].name)) {

      return;
    }

    readFile(evt.target.files[0]);
    
    return evt.target.value = "";
  }
};

refresh_avatar = function(img) {

  // Verificando se é a alteração de avatar da empresa ou do usuário
  if ( document.getElementById("edit_company_avatar_change") != null ){
    company_id = document.getElementById("edit_company_avatar_change").getAttribute('data-company');
    data_url = {company:company_id};
    route = url.ajax_get_company_avatar;
  } else {
    data_url = {image64: img}; 
    route = url.ajax_get_avatar;     
  }

  $.ajax({
    type: 'POST',
    url: route,
    data: data_url,
    success: function(data) {
      var avatar = $('.avatar');
      newSrc = url.folder_avatar + '/' + data;

      console.log(newSrc);
      console.log('aqui ta maneiro');

      for (var i=0; i <= avatar.length; i++){
        $(avatar[i]).attr('src', newSrc);
      }
    },
    error: function(data){
      console.log(data);
    }
  });
};

send_ajax = function(img) {

  // Verificando se é a alteração de avatar da empresa ou do usuário
  if ( document.getElementById("edit_company_avatar_change") != null ){
    company_id = document.getElementById("edit_company_avatar_change").getAttribute('data-company');
    data_url = {company:company_id,image64: img};
  } else {
    data_url = {image64: img};      
  }

  $.ajax({
    type: 'POST',
    url: url.ajax_upload,
    data: data_url,
    success: function(data) {
      console.log(data);
    },
    error: function(data){
      console.log(data);
    }
  });
}

saveCrop = function() {
  var result;

  result = $cropSandbox.get(0).toDataURL();
  $inputAttachTo.val(result);

  if(document.getElementById("adicionar-empresa") != null){
    
    var blocoIMG = document.getElementById("img");

    var image = new Image();
    image.src = $cropSandbox.get(0).toDataURL("image/png");

    blocoIMG.innerHTML = "";
    blocoIMG.appendChild(image);

    document.getElementById("limpaFormCompanies").addEventListener("click",function(){
        image.src="/relatto/static/images/imagemdefault.png";
    })

    blocoIMG.getElementsByTagName("img")[0].setAttribute("id","foto-perfil");
    blocoIMG.getElementsByTagName("img")[0].setAttribute("class","avatar");

    //   
    document.getElementById("avatar_upload").value = result;
    // Se for input hidden, trocar innerHTML por value().

  }
  else{
    send_ajax(result);
    refresh_avatar(result);  
  }

  

  return cleanImages();

};

$fileSelect.on('change', handleFileSelect);
$container.on('dragover', handleDragOver);
$container.on('drop', handleDropFileSelect);



if (settings.proxy_path !== void 0) {
  $urlSelect.on('dragover', handleDragOver);
  $urlSelect.on('drop', handleDropFileSelect);
  $urlSelectButton.click(function() {
    var url;
    if (!$urlSelect.val().match(/^(https?:\/\/)?/)) {
      return;
    }
    if (!fileAllowed($urlSelect.val())) {
      return;
    }
    setLoading();
    url = settings.proxy_path.replace(/:url/, $urlSelect.val());
    return $.get(url).done(function(data) {
      return setImages(data);
    }).fail(function(jqXNR, textStatus) {
      $progressBar.addClass('hide');
      return alert("Failed to load image");
    });
  });
}
$cancelButton.on('click', function() {
  
  document.getElementById("btnSubmitUpload").disabled = true;
  return cleanImages();
});
return $applyButton.on('click', function() {

  if (document.getElementById("btnSubmitUpload").disabled == false) {
    document.getElementById("btnSubmitUpload").disabled = true;
  };

  saveCrop();
  return $imagesContainer.modal('hide');

});
};

/*
# jQuery Awesome Cropper plugin
#
# Copyright 2013 8xx8, vdv73rus
#
# v0.0.2
*/


$.fn.extend({
  awesomeCropper: function(options) {
    return this.each(function() {
      if ($(this).data("awesomeCropper")) {
        if (options.remove) {
          $(this).data("awesomeCropper").remove();
          $(this).removeData("awesomeCropper");
        } else {
          $(this).data("awesomeCropper").setOptions(options);
        }
      } else if (!options.remove) {
        $(this).data("awesomeCropper", new $.awesomeCropper(this, options));
      }
      if (options.instance) {
        return $(this).data("awesomeCropper");
      }
      return this;
    });
  }
});

}).call(this);
